events {
  worker_connections 1024;
}

error_log stderr;

http {
  resolver 127.0.0.11 ipv6=off;
  access_log /dev/stdout;

  lua_package_path "/usr/local/openresty/lualib/?.lua;/usr/local/openresty/luajit/share/lua/5.1/?.lua;/lua/src/?.lua";
  lua_package_cpath "/usr/local/openresty/lualib/?.so;/usr/local/openresty/luajit/lib/lua/5.1/?.so;";

  init_by_lua_block {
    bakery = require "resty-bakery"
  }

  types {
    application/vnd.apple.mpegurl m3u8;
    video/mp2t ts;
  }

  server {
    listen 8181;
    location /media {
        add_header 'Access-Control-Allow-Origin' '*';
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';

        alias /media;
    }
  }

  server {
    listen 8080;

    # this was created to avoid chunk transfer
    # some clients aren't able to deal with that
    # most clients are good to use /media though
    location /mmedia {
         content_by_lua_block {
            local uri = ngx.re.sub(ngx.var.uri, "^/mmedia/(.*)/(.*)$", "/media/$1/$2")
            local res = ngx.location.capture(uri)
            if res then
              ngx.header.content_length = #res.body
              -- forwarding all the headers
              -- except transfer encoding
              for k, v in pairs(res.header) do
                if k:lower() ~= "transfer-encoding" then
                  ngx.header[k] = v
                end
              end
              ngx.print(res.body)
            end
         }
    }

    location /media {
        proxy_pass http://localhost:8181;

        # we need to keep this url since we're going to rewrite
        set_by_lua_block $original_uri { return ngx.var.uri }

        # when the Lua code may change the length of the response body, then it is required to always clear out the Content-Length
        header_filter_by_lua_block { ngx.header.content_length = nil }

        # removing the filters
        rewrite_by_lua_block {
          local uri = ngx.re.sub(ngx.var.uri, "^/media/(.*)/(.*)$", "/media/$2")
          ngx.req.set_uri(uri)
        }

        # applying the bandwidth min filter
        # but we can use the ngx.var.original_uri to build/select the filters
        body_filter_by_lua_block {
          local errors
          local modified_manifest
          modified_manifest, errors = bakery.filter(ngx.var.original_uri, ngx.arg[1])

          if #errors > 0 then
            for _, err in ipairs(errors) do
              ngx.log(ngx.ERR, err .. " for uri " .. ngx.var.original_uri)
            end
          end

          ngx.arg[1] = modified_manifest
          ngx.arg[2] = true
        }
    }
  }
}

